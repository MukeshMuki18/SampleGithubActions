name: Process POS API Issue

on:
  # issues:
  #   types: [opened]

jobs:
  extract-fields:
    runs-on: windows-latest
    outputs:
      season: ${{ steps.extract.outputs.season }}
      department: ${{ steps.extract.outputs.department }}
      articleCount: ${{ steps.extract.outputs.articleCount }}
      promotion: ${{ steps.extract.outputs.promotion }}
    steps:
      - name: Extract issue details using PowerShell
        id: extract
        shell: pwsh
        run: |
          Write-Output "Extracting fields from issue body..."

          $inputString = @"
          ${{ github.event.issue.body }}
          "@

          # Define regex pattern
          $pattern = "### (\w+)\s+(.+)"
          
          # Create an empty hashtable to store extracted values
          $values = @{}

          # Use regex to find matches
          foreach ($match in [regex]::Matches($inputString, $pattern)) {
              $key = $match.Groups[1].Value  # Extract section name
              $value = $match.Groups[2].Value  # Extract corresponding value
              $values[$key] = $value
          }

          # Extract specific keys
          $season = $values["Season"]
          $department = $values["Department"]
          $articleCount = $values["ArticleCount"]
          $promotion = $values["Promotion"]

          Write-Output "Extracted values:"
          Write-Output "Season: $season"
          Write-Output "Department: $department"
          Write-Output "ArticleCount: $articleCount"
          Write-Output "Promotion: $promotion"

          # Set outputs for next job
          # echo "::set-output name=season::$season"
          # echo "::set-output name=department::$department"
          # echo "::set-output name=articleCount::$articleCount"
          # echo "::set-output name=promotion::$promotion"
          echo "{season}={$season}" >> $env:GITHUB_OUTPUT
          echo "{department}={$department}" >> $env:GITHUB_OUTPUT
          echo "{articleCount}={$articleCount}" >> $env:GITHUB_OUTPUT
          echo "{promotion}={$promotion}" >> $env:GITHUB_OUTPUT
  write-to-file:
    # runs-on: pos
    runs-on: ubuntu-latest
    needs: extract-fields
    steps:
      - name: Create and write issue details to file
        run: |
          echo "Season: ${{ needs.extract-fields.outputs.season }}" > issue_output.txt
          echo "Department: ${{ needs.extract-fields.outputs.department }}" >> issue_output.txt
          echo "ArticleCount: ${{ needs.extract-fields.outputs.articleCount }}" >> issue_output.txt
          echo "Promotion: ${{ needs.extract-fields.outputs.promotion }}" >> issue_output.txt

  #     - name: Copy the file to local
  #       run: |
  #         copy issue_output.txt "C:\Users\MUKESH\Downloads\issue_output.txt"
  close-issue:
    runs-on: ubuntu-latest
    needs: write-to-file
    steps:
      - name: Close the issue
        run: |
          gh issue close ${{ github.event.issue.number }} --repo ${{ github.repository }} --reason completed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
